#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏£‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° Accuracy ‡∏Ç‡∏≠‡∏á Thai OCR Model
"""

import os
import sys
import subprocess
from pathlib import Path

def run_accuracy_improvement_pipeline():
    """‡∏£‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° Accuracy"""
    
    print("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Accuracy ‡∏Ç‡∏≠‡∏á Thai OCR Model")
    print("=" * 60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô project root
    if not os.path.exists('thai-letters/th_dict.txt'):
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå root ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ")
        return False
    
    steps = [
        {
            "name": "‡∏™‡∏£‡πâ‡∏≤‡∏á Dictionary ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
            "script": "scripts/ml/optimize_thai_dict.py",
            "description": "‡∏•‡∏î dictionary ‡∏à‡∏≤‡∏Å ~880 ‡πÄ‡∏õ‡πá‡∏ô ~100 ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞"
        },
        {
            "name": "‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á Configuration",
            "script": "scripts/ml/update_inference_config_for_thai.py", 
            "description": "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ max_text_length=5, use_space_char=False"
        },
        {
            "name": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß",
            "script": "scripts/ml/test_optimized_model.py",
            "description": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"
        }
    ]
    
    results = []
    
    for i, step in enumerate(steps, 1):
        print(f"\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {i}: {step['name']}")
        print(f"   {step['description']}")
        print(f"   ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô: {step['script']}")
        
        try:
            # ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
            result = subprocess.run([
                sys.executable, step['script']
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                if result.stdout:
                    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                    for line in result.stdout.split('\n'):
                        if any(keyword in line for keyword in ['‚úÖ', 'üìä', 'üéØ', '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']):
                            print(f"   {line}")
                results.append({"step": step['name'], "status": "success", "output": result.stdout})
            else:
                print(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                if result.stderr:
                    print(f"   ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result.stderr}")
                results.append({"step": step['name'], "status": "failed", "error": result.stderr})
                
        except Exception as e:
            print(f"   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            results.append({"step": step['name'], "status": "error", "error": str(e)})
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print("\n" + "=" * 60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
    print("=" * 60)
    
    success_count = sum(1 for r in results if r['status'] == 'success')
    total_steps = len(steps)
    
    for result in results:
        status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
        print(f"{status_icon} {result['step']}")
    
    print(f"\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/{total_steps} ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô")
    
    if success_count == total_steps:
        print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Accuracy ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô:")
        print("   - thai-letters/th_dict_optimized.txt")
        print("   - models/sagemaker_trained/config_optimized.yml")
        print("   - OPTIMIZED_MODEL_TEST_RESULTS_[timestamp].json")
        print("\nüìà ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π accuracy ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß")
    else:
        print(f"\n‚ö†Ô∏è  ‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß {total_steps - success_count} ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
    
    return success_count == total_steps

if __name__ == "__main__":
    run_accuracy_improvement_pipeline()
