#!/usr/bin/env python3
"""
PaddleOCR Inference Tools: ‡πÉ‡∏ä‡πâ PaddleOCR tools ‡πÄ‡∏û‡∏∑‡πà‡∏≠ inference ‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡∏°‡∏≤
"""

import os
import sys
import cv2
import numpy as np
from pathlib import Path
import json
import random
from typing import Dict, List, Tuple

# Add PaddleOCR paths
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root / "PaddleOCR"))
sys.path.append(str(project_root / "PaddleOCR" / "tools"))

try:
    import paddle
    from tools.infer_rec import TextRecognizer
    from ppocr.utils.utility import get_model_config
    print("‚úÖ PaddleOCR tools imported successfully")
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    sys.exit(1)

class PaddleOCRInference:
    """‡πÉ‡∏ä‡πâ PaddleOCR tools ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö inference ‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡∏°‡∏≤"""
    
    def __init__(self, model_dir: Path):
        self.model_dir = model_dir
        self.project_root = project_root
        self.text_recognizer = None
        
    def initialize_recognizer(self) -> bool:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Text Recognizer"""
        try:
            print("ü§ñ Initializing PaddleOCR Text Recognizer...")
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ arguments ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TextRecognizer
            class Args:
                def __init__(self, model_dir: Path):
                    # Model paths
                    self.rec_model_dir = str(model_dir / "best_model")  # ‡πÉ‡∏ä‡πâ best_model directory
                    self.rec_image_shape = "3, 64, 256"  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
                    self.rec_batch_num = 1
                    self.max_text_length = 25
                    
                    # Character dictionary
                    dict_file = project_root / "th_dict.txt"
                    self.rec_char_dict_path = str(dict_file) if dict_file.exists() else None
                    
                    # Algorithm ‡πÅ‡∏•‡∏∞ settings
                    self.rec_algorithm = "CRNN"
                    self.use_space_char = False
                    
                    # Hardware settings
                    self.use_gpu = False  # ‡πÉ‡∏ä‡πâ CPU
                    self.use_tensorrt = False
                    self.use_fp16 = False
                    self.gpu_mem = 500
                    
                    # Output settings
                    self.vis_font_path = None
                    self.drop_score = 0.5
            
            args = Args(self.model_dir)
            
            print(f"üìÅ Model directory: {args.rec_model_dir}")
            print(f"üìÑ Character dict: {args.rec_char_dict_path}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ model directory ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            model_path = Path(args.rec_model_dir)
            if not model_path.exists():
                print(f"‚ùå Model directory not found: {model_path}")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
            model_files = list(model_path.iterdir())
            print(f"üìä Model files: {[f.name for f in model_files]}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á TextRecognizer
            self.text_recognizer = TextRecognizer(args)
            
            print("‚úÖ Text Recognizer initialized successfully")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to initialize Text Recognizer: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def recognize_image(self, img_path: str) -> Tuple[str, float]:
        """‡∏ó‡∏≥ OCR ‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"""
        try:
            if self.text_recognizer is None:
                print("‚ùå Text Recognizer not initialized")
                return "", 0.0
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ
            img = cv2.imread(img_path)
            if img is None:
                print(f"‚ùå Cannot read image: {img_path}")
                return "", 0.0
            
            # ‡πÉ‡∏ä‡πâ TextRecognizer
            img_list = [img]
            rec_res, elapse = self.text_recognizer(img_list)
            
            # Extract ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if rec_res and len(rec_res) > 0:
                text = rec_res[0][0]  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                confidence = rec_res[0][1]  # confidence
                return text, confidence
            else:
                return "", 0.0
            
        except Exception as e:
            print(f"‚ùå Recognition error: {e}")
            return "", 0.0

def test_paddleocr_inference():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö PaddleOCR inference"""
    print("üß™ Testing PaddleOCR Inference with Trained Model")
    print("=" * 60)
    
    project_root = Path(__file__).parent.parent.parent
    model_dir = project_root / "models" / "sagemaker_trained"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á inference engine
    inference = PaddleOCRInference(model_dir)
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô recognizer
    if not inference.initialize_recognizer():
        print("‚ùå Failed to initialize recognizer")
        return False
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    dataset_dir = project_root / "thai-letters" / "datasets" / "converted" / "train_data_thai_paddleocr_0731_1604"
    val_images_dir = dataset_dir / "train_data" / "rec" / "thai_data" / "val"
    val_labels_file = dataset_dir / "train_data" / "rec" / "rec_gt_val.txt"
    
    if not val_images_dir.exists() or not val_labels_file.exists():
        print("‚ùå Validation data not found")
        return False
    
    # ‡πÇ‡∏´‡∏•‡∏î ground truth
    ground_truth = {}
    with open(val_labels_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if '\t' in line:
                img_path, text_label = line.split('\t', 1)
                full_path = dataset_dir / "train_data" / "rec" / img_path
                if full_path.exists():
                    ground_truth[str(full_path)] = text_label
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡∏£‡∏π‡∏õ
    test_samples = list(ground_truth.items())[:10]
    
    print(f"\nüéØ Testing with {len(test_samples)} sample images:")
    print("-" * 60)
    
    correct_count = 0
    total_confidence = 0.0
    
    for i, (img_path, expected_text) in enumerate(test_samples, 1):
        img_name = Path(img_path).name
        print(f"\nüì∑ Test {i}: {img_name}")
        print(f"‚úÖ Expected: '{expected_text}'")
        
        # ‡∏ó‡∏≥ OCR
        predicted_text, confidence = inference.recognize_image(img_path)
        total_confidence += confidence
        
        print(f"ü§ñ Predicted: '{predicted_text}'")
        print(f"üìä Confidence: {confidence:.4f}")
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        is_correct = predicted_text.strip() == expected_text.strip()
        if is_correct:
            correct_count += 1
            print(f"‚úÖ Result: CORRECT")
        else:
            print(f"‚ùå Result: INCORRECT")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    accuracy = correct_count / len(test_samples) if test_samples else 0
    avg_confidence = total_confidence / len(test_samples) if test_samples else 0
    
    print(f"\n" + "=" * 60)
    print(f"üìä INFERENCE TEST SUMMARY")
    print(f"=" * 60)
    print(f"üéØ Total samples: {len(test_samples)}")
    print(f"‚úÖ Correct predictions: {correct_count}")
    print(f"üìà Accuracy: {accuracy:.2%}")
    print(f"üîÆ Average confidence: {avg_confidence:.4f}")
    
    if accuracy > 0.7:
        print(f"üéâ Excellent! Model is working well")
    elif accuracy > 0.5:
        print(f"üëç Good! Model shows promising results")
    elif accuracy > 0.3:
        print(f"‚ö†Ô∏è Moderate performance, needs improvement")
    else:
        print(f"‚ùå Poor performance, model may need retraining")
    
    print(f"\n‚úÖ PaddleOCR inference test completed!")
    return True

if __name__ == "__main__":
    test_paddleocr_inference()
