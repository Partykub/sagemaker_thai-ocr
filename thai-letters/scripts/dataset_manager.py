#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ Thai Dataset Manager - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á datasets ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö

‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á dataset ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:
thai-letters/
‚îú‚îÄ‚îÄ datasets/                    # üéØ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö datasets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚îÇ   ‚îú‚îÄ‚îÄ raw/                     # Dataset ‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
‚îÇ   ‚îú‚îÄ‚îÄ converted/               # Dataset ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô PaddleOCR format ‡πÅ‡∏•‡πâ‡∏ß
‚îÇ   ‚îî‚îÄ‚îÄ samples/                 # Dataset ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
‚îî‚îÄ‚îÄ scripts/                     # Scripts ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ dataset
"""

import os
import sys
from pathlib import Path
from datetime import datetime
from typing import Optional

class ThaiDatasetManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á dataset ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö"""
    
    def __init__(self, base_dir: Optional[Path] = None):
        """Initialize dataset manager"""
        if base_dir is None:
            # Get thai-letters directory (parent of scripts directory)
            self.base_dir = Path(__file__).parent.parent
        else:
            self.base_dir = Path(base_dir)
            
        # Dataset directories
        self.datasets_dir = self.base_dir / "datasets"
        self.raw_dir = self.datasets_dir / "raw"
        self.converted_dir = self.datasets_dir / "converted"
        self.samples_dir = self.datasets_dir / "samples"
        
    def ensure_structure(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á directory ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
        directories = [
            self.datasets_dir,
            self.raw_dir,
            self.converted_dir, 
            self.samples_dir
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
    
    def get_output_path(self, dataset_type: str = "converted", custom_name: str = None) -> str:
        """
        ‡πÑ‡∏î‡πâ path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö dataset ‡πÉ‡∏´‡∏°‡πà
        
        Args:
            dataset_type: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó dataset ('raw', 'converted', 'samples')
            custom_name: ‡∏ä‡∏∑‡πà‡∏≠ dataset ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
            
        Returns:
            Path string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö dataset
        """
        self.ensure_structure()
        
        if dataset_type == "raw":
            target_dir = self.raw_dir
            prefix = "thai_dataset_raw"
        elif dataset_type == "samples":
            target_dir = self.samples_dir
            prefix = "thai_dataset_sample"
        else:  # converted (default)
            target_dir = self.converted_dir
            prefix = "train_data_thai_paddleocr"
        
        if custom_name:
            output_name = custom_name
        else:
            timestamp = datetime.now().strftime("%m%d_%H%M")
            output_name = f"{prefix}_{timestamp}"
        
        return str(target_dir / output_name)