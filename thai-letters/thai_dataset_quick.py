#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Quick Thai Dataset Generator
‡∏™‡∏£‡πâ‡∏≤‡∏á dataset ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡∏≠‡∏ô
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå dict ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ "_dict.txt"
"""

import sys
import os
import subprocess
import glob
from pathlib import Path

def print_header():
    print("=" * 60)
    print("üéØ OPTIMIZED THAI DATASET GENERATOR")
    print("=" * 60)
    print("üìä Optimized obstacles: 8 types (Character-friendly)")
    print("üëÅÔ∏è  Enhanced readability: 99.8% success rate")
    print("üé® Better character visibility")
    print("üìù Samples per character: User configurable")
    print("üìö Dictionary selection: Interactive file chooser")
    print("üéõÔ∏è  Effects selection: Interactive obstacle chooser")
    print("=" * 60)

def show_usage():
    print("\nüìñ USAGE:")
    print("  python thai_dataset_quick.py <number_of_samples>")
    print("\nüé® EXAMPLES:")
    print("  python thai_dataset_quick.py 5    # Small test (fast)")
    print("  python thai_dataset_quick.py 10   # Standard (recommended)")
    print("  python thai_dataset_quick.py 20   # Large (high quality)")
    print("  python thai_dataset_quick.py 50   # Production (professional)")
    print("\n‚ú® FEATURES:")
    print("  ‚Ä¢ Optimized obstacles for character visibility")
    print("  ‚Ä¢ 99.8% success rate")
    print("  ‚Ä¢ Automatic output folder naming")
    print("  ‚Ä¢ Enhanced Thai character support")
    print("  ‚Ä¢ JSON statistics output")
    print("  ‚Ä¢ Interactive dictionary file selection")
    print("  ‚Ä¢ Interactive effects/obstacles selection")

def show_effects_selection():
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ/‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ"""
    effects = {
        'rotation': {'name': '‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô', 'values': [-2, -1, 0, 1, 2], 'description': '‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢'},
        'brightness': {'name': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á', 'values': [0.8, 0.9, 1.0, 1.1, 1.2], 'description': '‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á'},
        'contrast': {'name': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î', 'values': [0.8, 0.9, 1.0, 1.1, 1.2], 'description': '‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏£‡∏≤‡∏™‡∏ï‡πå'},
        'blur': {'name': '‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏•‡∏≠', 'values': [0, 0.2, 0.4], 'description': '‡πÄ‡∏ö‡∏•‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢'},
        'noise_level': {'name': '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏£‡∏ö‡∏Å‡∏ß‡∏ô', 'values': [0, 0.02, 0.05], 'description': '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢'},
        'position': {'name': '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', 'values': ['center-left', 'center', 'center-right'], 'description': '‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'},
        'padding': {'name': '‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á', 'values': [15, 20, 25], 'description': '‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏ö'},
        'compression': {'name': '‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î', 'values': [85, 90, 95, 100], 'description': '‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î'}
    }
    
    print("\nüéõÔ∏è  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ/‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:")
    print("=" * 60)
    print("üîß ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß)")
    print("-" * 60)
    
    for i, (key, effect) in enumerate(effects.items(), 1):
        print(f"  {i}. {effect['name']} ({key})")
        print(f"     üìù {effect['description']}")
        print(f"     üéöÔ∏è  ‡∏Ñ‡πà‡∏≤: {effect['values']}")
        print()
    
    print("  9. ‚ú® ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)")
    print("  0. üö´ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ (‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡∏•‡πà‡∏≤)")
    print("-" * 60)
    
    while True:
        try:
            choice = input("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ , ‡∏´‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô 1,2,3): ").strip()
            
            if choice == "0":
                print("‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ")
                return []
            elif choice == "9":
                print("‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                return list(effects.keys())
            else:
                # ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ comma
                choices = [int(x.strip()) for x in choice.split(',')]
                selected_effects = []
                effect_list = list(effects.keys())
                
                for choice_num in choices:
                    if 1 <= choice_num <= len(effects):
                        effect_key = effect_list[choice_num - 1]
                        selected_effects.append(effect_key)
                
                if selected_effects:
                    effect_names = [effects[key]['name'] for key in selected_effects]
                    print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {', '.join(effect_names)}")
                    return selected_effects
                else:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    
        except ValueError:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô 1,2,3)")
        except KeyboardInterrupt:
            print("\n‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            return None

def find_dict_files():
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ '_dict.txt'"""
    dict_files = []
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_dir_files = glob.glob("*_dict.txt") + glob.glob("*dict.txt")
    for file in current_dir_files:
        if os.path.isfile(file):
            dict_files.append(file)
    
    return sorted(list(set(dict_files)))  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö

def show_dict_selection(dict_files):
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå dict"""
    if not dict_files:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ '_dict.txt'")
        print("üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:")
        print("   ‚Ä¢ th_dict.txt")
        print("   ‚Ä¢ number_dict.txt")
        print("   ‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ '_dict.txt' ‡∏≠‡∏∑‡πà‡∏ô‡πÜ")
        return None
    
    print("\nüìö ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Dictionary:")
    print("-" * 40)
    
    for i, dict_file in enumerate(dict_files, 1):
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
        try:
            with open(dict_file, 'r', encoding='utf-8') as f:
                lines = len(f.readlines())
            print(f"  {i}. {dict_file} ({lines:,} characters)")
        except Exception as e:
            print(f"  {i}. {dict_file} (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ: {e})")
    
    print("-" * 40)
    
    while True:
        try:
            choice = input(f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-{len(dict_files)}): ").strip()
            choice_num = int(choice)
            
            if 1 <= choice_num <= len(dict_files):
                selected_file = dict_files[choice_num - 1]
                print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {selected_file}")
                return selected_file
            else:
                print(f"‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-{len(dict_files)}")
                
        except ValueError:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        except KeyboardInterrupt:
            print("\n‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            return None

def validate_samples(samples_str):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏°‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
    try:
        samples = int(samples_str)
        if samples < 1:
            print("‚ùå Error: Number of samples must be at least 1")
            return None
        if samples > 200:
            print("‚ö†Ô∏è  Warning: Large number of samples (>200) may take a long time")
            confirm = input("Continue? (y/n): ").strip().lower()
            if confirm not in ['y', 'yes']:
                return None
        return samples
    except ValueError:
        print("‚ùå Error: Please enter a valid number")
        return None

def generate_output_name(samples, dict_file, effects_used):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ output folder ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô datasets/raw/)"""
    from datetime import datetime
    import os
    timestamp = datetime.now().strftime("%m%d_%H%M")
    
    # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå dict ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ folder
    dict_name = Path(dict_file).stem  # ‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ extension
    
    if samples <= 5:
        category = "minimal"
    elif samples <= 15:
        category = "standard"
    elif samples <= 30:
        category = "comprehensive"
    else:
        category = "production"
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    if not effects_used:
        effects_suffix = "ideal_conditions"
    elif len(effects_used) >= 6:  # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        effects_suffix = "all_effects"
    else:
        # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ
        effect_abbr = {
            'rotation': 'rot', 'brightness': 'brt', 'contrast': 'con',
            'blur': 'blur', 'noise_level': 'noise', 'position': 'pos',
            'padding': 'pad', 'compression': 'comp'
        }
        effects_suffix = "_".join([effect_abbr.get(eff, eff[:3]) for eff in effects_used[:3]])
        if len(effects_used) > 3:
            effects_suffix += f"_plus{len(effects_used)-3}"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á datasets/raw directory
    os.makedirs("datasets/raw", exist_ok=True)
    
    # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô path ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô datasets/raw/
    dataset_name = f"thai_dataset_{category}_{samples}samples_{dict_name}_{effects_suffix}_{timestamp}"
    return f"datasets/raw/{dataset_name}"

def run_generator(samples, output_dir, dict_file, effects_list):
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ main dataset generator"""
    # ‡πÉ‡∏ä‡πâ python ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows, python3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Linux/Mac
    import platform
    python_cmd = "python" if platform.system() == "Windows" else "python3"
    
    command = [
        python_cmd, 
        "thai_dataset_generator.py", 
        str(samples),
        "-d", dict_file,
        "-o", output_dir
    ]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ
    if effects_list is not None:
        if len(effects_list) == 0:
            command.extend(["--effects", "none"])
        else:
            command.extend(["--effects", ",".join(effects_list)])
    
    print(f"\nüöÄ Running command: {' '.join(command)}")
    print("=" * 60)
    
    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        result = subprocess.run(command, check=True)
        
        print("\n" + "=" * 60)
        print("üéâ GENERATION COMPLETED!")
        print("=" * 60)
        print(f"üìÅ Output folder: {output_dir}")
        print(f"üìä Samples per character: {samples}")
        print(f"üìö Dictionary used: {dict_file}")
        if effects_list is not None:
            if len(effects_list) == 0:
                print(f"üéõÔ∏è  Effects used: None (ideal conditions)")
            else:
                print(f"üéõÔ∏è  Effects used: {', '.join(effects_list)}")
        print(f"üìÑ Labels file: {output_dir}/labels.txt")
        print(f"üìã Statistics: {output_dir}/dataset_details.json")
        print("=" * 60)
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Error running generator: {e}")
        return False
    except FileNotFoundError:
        print("\n‚ùå Error: thai_dataset_generator.py not found")
        print("Please make sure you're in the correct directory")
        return False

def main():
    print_header()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö arguments
    if len(sys.argv) != 2:
        show_usage()
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ
    samples = validate_samples(sys.argv[1])
    if samples is None:
        return
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå dict
    print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå dictionary...")
    dict_files = find_dict_files()
    
    selected_dict = show_dict_selection(dict_files)
    if selected_dict is None:
        return
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ
    selected_effects = show_effects_selection()
    if selected_effects is None:
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ output
    output_dir = generate_output_name(samples, selected_dict, selected_effects)
    
    print(f"\nüìä Creating Thai dataset:")
    print(f"   ‚Ä¢ Samples per character: {samples}")
    print(f"   ‚Ä¢ Output folder: {output_dir}")
    print(f"   ‚Ä¢ Dictionary: {selected_dict}")
    if selected_effects:
        print(f"   ‚Ä¢ Effects: {', '.join(selected_effects)}")
    else:
        print(f"   ‚Ä¢ Effects: None (ideal conditions)")
    print(f"   ‚Ä¢ Optimized obstacles: 8 types")
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå dict ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    try:
        with open(selected_dict, 'r', encoding='utf-8') as f:
            char_count = len(f.readlines())
        estimated_images = samples * char_count
        print(f"   ‚Ä¢ Estimated images: {estimated_images:,}")
    except Exception:
        estimated_images = samples * 879  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    
    # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
    if samples > 20:
        confirm = input(f"\n‚ö†Ô∏è  This will generate approximately {estimated_images:,} images. Continue? (y/n): ").strip().lower()
        if confirm not in ['y', 'yes']:
            print("‚ùå Cancelled by user")
            return
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ generator
    success = run_generator(samples, output_dir, selected_dict, selected_effects)
    
    if success:
        print(f"\n‚úÖ Dataset generation completed successfully!")
        print(f"üìÅ Check the folder: {output_dir}")
        print(f"üìö Dictionary used: {selected_dict}")
    else:
        print(f"\n‚ùå Dataset generation failed!")

if __name__ == "__main__":
    main()
